<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home</title><link>https://example.org/</link><description>Recent content on Home</description><generator>Hugo 0.64.0 -- gohugo.io</generator><language>en</language><managingEditor>skojaku@iu.edu (Sadamori Kojaku)</managingEditor><webMaster>skojaku@iu.edu (Sadamori Kojaku)</webMaster><copyright>Sadamori Kojaku — All rights reserved.</copyright><lastBuildDate>Mon, 11 Feb 2019 19:30:08 +1000</lastBuildDate><atom:link href="https://example.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Residual2Vec - Debiasing graph embedding with random graphs</title><link>https://example.org/research/residual2vec/</link><pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate><author>skojaku@iu.edu (Sadamori Kojaku)</author><guid isPermaLink="true">https://example.org/research/residual2vec/</guid><description>&lt;p>&lt;em>S. Kojaku, J. Yoon, I. Constantino, Y.-Y. Ahn. NeurIPS (2021)&lt;/em>&lt;/p>
&lt;p>[Paper (in press)], [&lt;a href="https://arxiv.org/abs/2110.07654">Preprint&lt;/a>], [&lt;a href="https://github.com/skojaku/residual2vec">Code&lt;/a>], [&lt;a href="https://drive.google.com/file/d/1cqk9RtUw5Qlmz5gvpIKtF12b9NJiFgV4/view?usp=sharing">Slide&lt;/a>] [&lt;a href="https://observablehq.com/@skojaku/visualizing-journal-embeddings">Interactive Vis.&lt;/a>]&lt;/p>
&lt;p>&amp;ldquo;Your friends have more friends than you do&amp;rdquo; is a mathematical necessity known as &lt;em>the friendship paradox&lt;/em>. Beyond an interesting piece of trivia, it has substantial importance in graph embeddings: many graph embeddings learn the graph structure by following the &amp;lsquo;friendship ties&amp;rsquo; (or edges), which preferentially leads by itself to high-degree nodes. How does this bias toward high-degree nodes impact on embedding? In pursuit of the answer, we find an overlooked built-in debiasing feature of word2vec that happens to negate the bias due to the friendship paradox. We demonstrate that this overlooked debiasing feature can be used to negate other types of bias, and enable us to control the bias in graph embeddings.&lt;/p>
&lt;p>&lt;br>&lt;br>&lt;/p>
&lt;div style="padding:56.25% 0 0 0;position:relative;">&lt;iframe src="https://player.vimeo.com/video/635866503?h=2aa318f56b&amp;amp;badge=0&amp;amp;autopause=0&amp;amp;player_id=0&amp;amp;app_id=58479" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen style="position:absolute;top:0;left:0;width:100%;height:100%;" title="Residual2Vec: Debiasing graph embedding with random graphs">&lt;/iframe>&lt;/div>&lt;script src="https://player.vimeo.com/api/player.js">&lt;/script></description></item><item><title>Publications</title><link>https://example.org/publications/</link><pubDate>Mon, 11 Feb 2019 19:30:08 +1000</pubDate><author>skojaku@iu.edu (Sadamori Kojaku)</author><guid isPermaLink="true">https://example.org/publications/</guid><description>&lt;h5 id="cvdocscvcv-sadamori-kojakupdf-履歴書docscvcv-sadamori-kojaku-japdf">&lt;a href="https://example.org/docs/cv/cv-sadamori-kojaku.pdf">CV&lt;/a> &lt;a href="https://example.org/docs/cv/cv-sadamori-kojaku-ja.pdf">履歴書&lt;/a>&lt;/h5>
&lt;h5 id="google-scholarhttpsscholargooglecomcitationsuseriywt4r4aaaajhlen">&lt;a href="https://scholar.google.com/citations?user=IyWt4R4AAAAJ&amp;amp;hl=en">Google Scholar&lt;/a>&lt;/h5>
&lt;h2 id="preprints">Preprints&lt;/h2>
&lt;ol>
&lt;li>Dakota Murray, Jisung Yoon, &lt;strong>Sadamori Kojaku&lt;/strong>, Rodrigo Costas, Woo-Sung Jung, Staša Milojević, Yong-Yeol Ah
&lt;ul>
&lt;li>&lt;a href="https://arxiv.org/abs/2012.02785">[Preprint]&lt;/a>]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="journal-papers-and-conference-proceedings-refereed">Journal papers and conference proceedings (refereed)&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Sadamori Kojaku&lt;/strong>, Jisung Yoon, Isabel Constantino, and Yong-Yeol Ahn. Residual2Vec: Debiasing graph embedding with random graphs. NeurIPS (2021).&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://arxiv.org/abs/">[Preprint]&lt;/a>], [&lt;a href="https://github.com/skojaku/residual2vec">Code&lt;/a>]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sadamori Kojaku&lt;/strong>, Giacomo Livan, and Naoki Masuda. Detecting citation cartels in journal networks. Scientific Reports. 11, 14524 (2021).&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://arxiv.org/abs/2009.09097">[Preprint]&lt;/a>], [&lt;a href="https://github.com/skojaku/journal-citation-cartels">Code&lt;/a>]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sadamori Kojaku&lt;/strong>, Laurent Hébert-Dufresne, Enys Mones, Sune Lehmann, Yong-Yeol Ahn. The effectiveness of backward contact tracing in networks. Nature Physics (2021).&lt;/p>
&lt;ul>
&lt;li>[&lt;a href="https://www.nature.com/articles/s41567-021-01187-2">Paper&lt;/a>], [&lt;a href="https://arxiv.org/abs/2005.02362">Preprint&lt;/a>], [ &lt;a href="https://github.com/yy/backward-contact-tracing">Code&lt;/a> ]&lt;a name="scola-ref">&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sadamori Kojaku&lt;/strong>, Naoki Masuda. Constructing networks by filtering correlation matrices: A null model approach, Proceedings of the Royal Society A, 475, 2231 (2019).&lt;/p>
&lt;ul>
&lt;li>[&lt;a href="https://royalsocietypublishing.org/doi/abs/10.1098/rspa.2019.0578?af=R">Paper&lt;/a>], [&lt;a href="https://arxiv.org/abs/1903.10805">Preprint&lt;/a>], [ &lt;a href="https://github.com/skojaku/scola">Python code&lt;/a> ]&lt;a name="scola-ref">&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sadamori Kojaku&lt;/strong>, Mengqiao Xu, Haoxiang Xia, Naoki Masuda. Multiscale core-periphery structure in a global liner shipping network. Scientific Reports, 9, 404 (2019)&lt;/p>
&lt;ul>
&lt;li>[&lt;a href="https://www.nature.com/articles/s41598-018-35922-2">Paper&lt;/a>], [&lt;a href="https://arxiv.org/abs/1808.04549">Preprint&lt;/a>], [&lt;a href="https://github.com/skojaku/multiresolcp">Python code&lt;/a>].&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sadamori Kojaku&lt;/strong>, Giulio Cimini, Guido Caldarelli, Naoki Masuda. Structural changes in the interbank market across the financial crisis from multiple core-periphery analysis. Journal of Network Theory in Finance, 4, 33-51 (2018)&lt;/p>
&lt;ul>
&lt;li>[&lt;a href="https://doi.org/10.21314/JNTF.2018.044">Paper&lt;/a>], [&lt;a href="https://arxiv.org/abs/1802.05139">Preprint&lt;/a>]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Naoki Masuda, &lt;strong>Sadamori Kojaku&lt;/strong>, Yukie Sano. A configuration model for correlation matrices. Physical Review E, 98, 012312 (2018)&lt;/p>
&lt;ul>
&lt;li>[&lt;a href="https://doi.org/10.1103/PhysRevE.98.012312">Paper&lt;/a>], [&lt;a href="https://arxiv.org/abs/1806.08709">Preprint&lt;/a>], [&lt;a href="https://github.com/naokimas/config_corr">MATLAB code&lt;/a>]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sadamori Kojaku&lt;/strong>, Naoki Masuda. A generalised significance test for individual communities in networks. Scientific Reports, 8, 7351 (2018)&lt;/p>
&lt;ul>
&lt;li>[&lt;a href="https://www.nature.com/articles/s41598-018-25560-z">Paper&lt;/a>], [&lt;a href="https://arxiv.org/abs/1712.00298">Preprint&lt;/a>], [&lt;a href="https://github.com/skojaku/qstest/">Python code&lt;/a>]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sadamori Kojaku&lt;/strong>, Naoki Masuda. Core-periphery structure requires something else in the network. New Journal of Physics, 20, 043012 (2018)&lt;/p>
&lt;ul>
&lt;li>[&lt;a href="http://iopscience.iop.org/article/10.1088/1367-2630/aab547">Paper&lt;/a>], [&lt;a href="https://arxiv.org/abs/1710.07076%22">Preprint&lt;/a>], [&lt;a href="https://github.com/skojaku/km_config/">Code: C++, MATLAB and Python code&lt;/a>]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sadamori Kojaku&lt;/strong>, Naoki Masuda. Finding multiple core-periphery pairs in networks. Physical Review E, 96, 052313 (2017)&lt;/p>
&lt;ul>
&lt;li>[&lt;a href="https://journals.aps.org/pre/abstract/10.1103/PhysRevE.96.052313">Paper&lt;/a>], [&lt;a href="https://arxiv.org/abs/1702.06903%22">Preprint&lt;/a>], [&lt;a href="http://www.naokimasuda.net/publ_e.html">MATLAB code&lt;/a>]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sadamori Koujaku&lt;/strong>, Ichigaku Takigawa, Mineichi Kudo and Hideyuki Imai. Dense core model for cohesive subgraph discovery. Social Networks, 44, 143-152 (2016)&lt;/p>
&lt;ul>
&lt;li>[&lt;a href="http://www.sciencedirect.com/science/article/pii/S0378873315000520">Paper&lt;/a>]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sadamori Koujaku&lt;/strong>, Mineichi Kudo, Ichigaku Takigawa and Hideyuki Imai. Community change detection in dynamic networks in noisy environment. 24th International Conference on World Wide Web. Florence, Italy, May 18 - 22 (2015)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sadamori Koujaku&lt;/strong>, Mineichi Kudo, Ichigaku Takigawa and Hideyuki Imai. Structual change point detection for social networks. The World Congress on Engineering. London, the United Kingdom, July 3-5 (2013)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>幸若 完壮&lt;/strong>, 渡辺 浩太, 五十嵐 一. 合理的な忘却型Profit Sharing強化学習法. 電気学会論文誌Ｃ, 132, 448-454 (2012)&lt;/p>
&lt;ul>
&lt;li>[&lt;a href="https://www.jstage.jst.go.jp/article/ieejeiss/132/3/132_3_448/_article/-char/ja/">Paper&lt;/a>]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sadamori Koujaku&lt;/strong>, Kota Watanabe and Hajime Igarashi. Adaptive profit sharing reinforcement learning for dynamic environment. 10th International Conference on Machine Learning and Applications and Workshops. Hawaii, the United States (2011)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="commentary">Commentary&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>幸若 完壮&lt;/strong>. 埋め込み法が拓くネットワーク科学の新展開. 特集号「複雑ネットワーク研究の最前線」 システム制御情報学会論文誌, 65, 5, 185-191 (2021).&lt;/li>
&lt;/ol>
&lt;h2 id="oral-presentations-and-posters-refereed">Oral presentations and posters (refereed)&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Sadamori Kojaku&lt;/strong>, Attila Varga, Xiaoran Yan, Filipi N. Silva, Staša Milojević, Alessandro Flammini, and Yong-Yeol Ahn. The landscape of the COVID-19 research: A neural embedding approach. Netsci. Rome, Italy, 17-25 September (2020)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sadamori Kojaku&lt;/strong>, Giacomo Livan, and Naoki Masuda. Detecting citaion cartels in journal networks. Netsci. Rome, Italy, 17-25 September (2020)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sadamori Kojaku&lt;/strong> ネットワークコアの検出アルゴリズムとその応用. ネットワーク科学セミナー. 統計数理研究所. 8.28-30 (2019)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sadamori Kojaku&lt;/strong> and Naoki Masuda. Constructing networks from correlation matrices: An application to economical data. Threshold Networks. Nottingham 22-24 July (2019) [&lt;a href="https://example.org/docs/threshold-networks/poster.pdf">poster&lt;/a>]&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sadamori Kojaku&lt;/strong>, Giulio Cimini, Guido Caldarelli, Naoki Masuda. Structural changes in the interbank market across the financial crisis from multiple core-periphery analysis. Netsci. Vermont, U.S., May 26-31 (2019) [&lt;a href="https://example.org/docs/netsci2019/netsci2019.pdf">slide&lt;/a>]&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sadamori Kojaku&lt;/strong> and Naoki Masuda. A generalised significance test for individual communities in networks. Netsci. Paris, France, June 11–15 (2018)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Xia Cui, &lt;strong>Sadamori Kojaku&lt;/strong>, Naoki Masuda and Danushka Bollegala. Solving feature spareness in text classification using core-periphery decomposition. In Proceedings of the 7th Joint Conference on Lexical and Computational Semantics, 225-264 (ACL, New Orleans, USA, 2018)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sadamori Kojaku&lt;/strong> and Naoki Masuda. Core-periphery structure in degree-heterogeneous networks. Netsci-X. Hangzhou, China (2018)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sadamori Kojaku&lt;/strong> and Naoki Masuda. Multi-scale organisation of core-periphery structure in networks. 1st Laten American Conference on Complex Networks. Puebla, Mexico September 25-29 (2017) [poster]&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sadamori Kojaku&lt;/strong> and Naoki Masuda. Core-periphery structure of networks: Consideration for random heterogeneous networks. Netsci. Indianapolis, Indiana, USA (2017) [poster]&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sadamori Kojaku&lt;/strong> and Naoki Masuda. An extension of modularity for finding multiple core/periphery structure in networks. Netsci-X. Tel Aviv, Israel January 15-18 (2017) [poster]&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sadamori Kojaku&lt;/strong> and Naoki Masuda. Finding multiple core-periphery structure with random walks. 5th International Workshop on Complex Networks and their Applications. Milan, Italy November 30-December 2 (2016)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Keigo Kimura, Mineichi Kudo, Lu Sun and &lt;strong>Sadamori Kojaku&lt;/strong>. Fast random k-labelsets for large-scale multi-label classification. 23rd International Conference on Pattern Recognition. Cancun, Mexico December 4-8 (2016)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="invited-talk">Invited talk&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>幸若完壮&lt;/strong>. ネットワークコアの検出アルゴリズムとその応用. ネットワーク科学セミナー. 統計数理研究所. 8.28-30 (2019)&lt;/li>
&lt;/ol>
&lt;h2 id="awards">Awards&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>NetSci X Best Contribution on Financial Networks Award&lt;/strong> for &amp;ldquo;An extension of modularity for finding multiple core/periphery structure in networks&amp;rdquo; (2017)&lt;/li>
&lt;li>&lt;strong>Deans&amp;rsquo; Award&lt;/strong> for my doctoral thesis &amp;ldquo;Finding core communities in social networks.&amp;rdquo; (2015)&lt;/li>
&lt;li>&lt;strong>Best Student Award&lt;/strong> for &lt;em>Sadamori Koujaku&lt;/em>, Mineichi Kudo, Ichigaku Takigawa and Hideyuki Imai &amp;ldquo;Structural change point detection for evolutional networks.&amp;rdquo; The World Congress on Engineering (2013)&lt;/li>
&lt;/ol>
&lt;h2 id="referee-activities">Referee activities&lt;/h2>
&lt;ol>
&lt;li>Nature Communications&lt;/li>
&lt;li>Journal of Complex Networks&lt;/li>
&lt;li>Journal of Computational Social Science&lt;/li>
&lt;li>PLOS ONE&lt;/li>
&lt;li>Scientific Reports&lt;/li>
&lt;li>PeerJ&lt;/li>
&lt;/ol></description></item><item><title>Citation cartels</title><link>https://example.org/research/citation-cartels/</link><pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate><author>skojaku@iu.edu (Sadamori Kojaku)</author><guid isPermaLink="true">https://example.org/research/citation-cartels/</guid><description>&lt;p>&lt;strong>Sadamori Kojaku&lt;/strong>, Giacomo Livan, and Naoki Masuda. Detecting anomalous citation groups in journal networks. Scientific Reports, 11, 1-11 (2021).&lt;/p>
&lt;p>&lt;a href="https://www.nature.com/articles/s41598-021-93572-3">[Paper]&lt;/a> [&lt;a href="https://arxiv.org/abs/2009.09097">Preprint&lt;/a>], [&lt;a href="https://github.com/skojaku/cidre">Code&lt;/a>], [&lt;a href="https://drive.google.com/file/d/12QkfRUMWFzxSPq2tC53DQ9Ek4RYuxJEx/view?usp=sharing">Slide&lt;/a>]&lt;/p>
&lt;p>A fundamental principle in all areas of science is encapsulated by what is known as Kelvin&amp;rsquo;s maxim: &amp;ldquo;To measure is to know,&amp;rdquo; so-named for the father of Physics, William Thomson, Lord Kelvin. Although simple to state for physical experiments, measuring people is notoriously difficult, in part because people change actions in response to measurement.&lt;/p>
&lt;p>Scientists are measured in many ways, e.g., # of publications, citations, h-index, and to name a few. These indicators appear to be hard, sound neutral and give an air of objectivity, and are considered as a proxy for ``scientific excellence&amp;rsquo;'. These indicators are indispensable for research assessment for grants and tenure, creating an ever-increasing pressure to maintain high-performance indicators. As such, some scientists game the system by artificially boosting citations.&lt;/p>
&lt;p>Self-citations are a simple and famous practice to increase citations, although self-citations can be easily detected. A less detectable form of citation malpractice is &lt;em>citation cartel&lt;/em>.&lt;/p>
&lt;p>A citation cartel is a group of scientists who informally agree to cite with each other. Because it involves multiple scientists, identifying citation cartels is notoriously challenging, and little is known about this phenomenon itself.&lt;/p>
&lt;p>Here, we put forward an algorithm, CIDRE, to find anomalous citation groups in citation networks. With CIDRE, we systematically explore the anomalous citation behavior of journals. CIDRE detected more than half of known groups of journals suspended from Journal Citation Reports along with numerous new journal groups with anomalous citation patterns.&lt;/p>
&lt;div style="padding:62.5% 0 0 0;position:relative;">&lt;iframe src="https://player.vimeo.com/video/582302595?badge=0&amp;amp;autopause=0&amp;amp;player_id=0&amp;amp;app_id=58479&amp;amp;h=8e5a0ba380" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen style="position:absolute;top:0;left:0;width:100%;height:100%;" title="Detecting anomalous citation groups in journal networks">&lt;/iframe>&lt;/div>&lt;script src="https://player.vimeo.com/api/player.js">&lt;/script></description></item><item><title>Contact tracing</title><link>https://example.org/research/contact-tracing/</link><pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate><author>skojaku@iu.edu (Sadamori Kojaku)</author><guid isPermaLink="true">https://example.org/research/contact-tracing/</guid><description>&lt;p>&lt;strong>Sadamori Kojaku&lt;/strong>, Laurent Hébert-Dufresne, Enys Mones, Sune Lehmann, Yong-Yeol Ahn. The effectiveness of backward contact tracing in networks. Nature Physics (2021).&lt;/p>
&lt;p>[&lt;a href="https://www.nature.com/articles/s41567-021-01187-2">Paper&lt;/a>], [&lt;a href="https://arxiv.org/abs/2005.02362">Preprint&lt;/a>], [ &lt;a href="https://github.com/yy/backward-contact-tracing">Code&lt;/a> ]&lt;a name="scola-ref">&lt;/a>&lt;/p></description></item><item><title>Code &amp; Data</title><link>https://example.org/code/</link><pubDate>Mon, 11 Feb 2019 19:30:08 +1000</pubDate><author>skojaku@iu.edu (Sadamori Kojaku)</author><guid isPermaLink="true">https://example.org/code/</guid><description>&lt;p>I believe coding is the second most critical part of my work following writing, which not only implements an idea but also helps me understand and advance the idea.
For this reason, I have been writing a lot of code including those that are not directly relevant to my work, which are not listed in the following.
All my code can be found in &lt;strong>&lt;a href="https://github.com/skojaku">Github&lt;/a>&lt;/strong>&lt;/p>
&lt;h3 id="graph-embedding">Graph embedding&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>emlens&lt;/strong>
&lt;ul>
&lt;li>A lightweight python library for exploring embedding&lt;/li>
&lt;li>[&lt;a href="https://emlens.readthedocs.io/en/latest/">doc&lt;/a>], [&lt;a href="https://github.com/skojaku/emlens">source&lt;/a>]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="network-analysis">Network analysis&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Scola&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Network inference from correlational data&lt;/li>
&lt;li>[&lt;a href="https://scola.readthedocs.io/en/latest/">doc&lt;/a>], [&lt;a href="https://github.com/skojaku/scola">source&lt;/a>], [&lt;a href="https://arxiv.org/abs/1903.10805">paper&lt;/a>]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>cpnet&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>A lightweight python library for detecting core-periphery structure in networks&lt;/li>
&lt;li>[&lt;a href="https://core-periphery-detection.readthedocs.io/en/latest/index.html">doc&lt;/a>], [&lt;a href="https://github.com/skojaku/core-periphery-detection">source&lt;/a>], [&lt;a href="https://iopscience.iop.org/article/10.1088/1367-2630/aab547">paper&lt;/a>], [&lt;a href="https://journals.aps.org/pre/abstract/10.1103/PhysRevE.96.052313">paper&lt;/a>]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="miscellaneous">Miscellaneous&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://example.org/docs/misc/skojaku-hanyu.pdf">北大ヨット部の方へ&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Core-periphery structure of networks</title><link>https://example.org/research/core-periphery-structure/</link><pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate><author>skojaku@iu.edu (Sadamori Kojaku)</author><guid isPermaLink="true">https://example.org/research/core-periphery-structure/</guid><description>&lt;p>*Sadamori Kojaku, Naoki Masuda. New Journal of Physics, 20, 043012 (2018)*&lt;br>
&lt;em>Sadamori Kojaku, Naoki Masuda. Physical Revew E, 96, 052313 (2017)&lt;/em>&lt;/p>
&lt;p>Core-periphery structure is a mesoscale structure of networks, where a core is a group of densely interconnected nodes, and a periphery is a group of sparsely interconnected nodes.
Core-periphery structure has been found in various empirical networks such as social networks, biological networks and transportation networks [1, 2].
Many studies have assumed that networks consist of one core and one periphery.
However, networks may contain multiple core-periphery pairs.&lt;/p>
&lt;p>We developed an algorithm to find multiple core-periphery pairs in networks [3].
In the political blog network [4] shown in Fig. 1, the algorithm found two core-periphery pairs, each of which consists of the blogs sharing the same political agenda.
We applied this algorithm or its variant to an inter-bank trade network [5], a maritime transportation network [6] and a short-text classification task [7].&lt;/p>
&lt;p>We also showed that heterogeneous degree distributions alone explain single core-periphery structure [8]. In other words, when one says that a network is composed of a single core and a single periphery, hubs (i.e. nodes with large degrees, or the number of edges) are core nodes and nodes with small degrees are peripheral nodes. We proved that a core-periphery structure that is not merely explained by heterogeneous degree distributions necessarily involves at least three blocks of nodes. An example is a combination of a single core, a single periphery and a community, which yields three blocks. Another example is two core-periphery pairs, which yields four blocks in total. Based on this result, we extended our first algorithm [7] to find multiple core-periphery pairs in networks that are not merely explained by heterogeneous degree distributions [8].
The extended algorithm allows one to find small-degree core nodes and large-degree peripheral nodes.&lt;/p>
&lt;div align="center">
&lt;img src="https://example.org/docs/core-periphery/poliblog.png" title="Core-periphery structure">
&lt;/div>
&lt;p>&lt;strong>Figure&lt;/strong>: Two core-periphery pairs in the political blog network detected by our algorithm.
The filled or open circles indicate core nodes or peripheral nodes, respectively.
The colour of each circle indicates the core-periphery pair to which the node belongs.
The open circles with a grey border indicate nodes that do not belong to any core-periphery pair.&lt;/p>
&lt;h5 id="a-namecprefareferences">&lt;a name="cpref">&lt;/a>References&lt;/h5>
&lt;ol>
&lt;li>P. Csermely, A. London, L.-Y. Wu, and B. Uzzi, Journal of Complex Networks, 1, 93 (2013) [&lt;a href="https://doi.org/10.1093/comnet/cnt016">link&lt;/a>]&lt;/li>
&lt;li>M. P. Rombach, M. A. Porter, J. H. Fowler, P. J. Mucha, `SIAM Review, 59, 619-646 (2017) [&lt;a href="https://doi.org/10.1137/17M1130046">link&lt;/a>]&lt;/li>
&lt;li>S. Kojaku and N. Masuda, Physical Review E, 96, 052313 (2017) [&lt;a href="//doi.org/10.1103/PhysRevE.96.052313">link&lt;/a>]&lt;/li>
&lt;li>L. A. Adamic and N. Glance, in Proceedings of the 3rd International Workshop on Link Discovery, 36–43 (ACM, New York, USA, 2005) [&lt;a href="https://doi.org/10.1145/1134271.1134277">link&lt;/a>]&lt;/li>
&lt;li>S. Kojaku, G. Cimini, G. Caldarelli, N. Masuda, Journal of Network Theory in Finance, 4, 33-51 (2018) [&lt;a href="https://doi.org/10.21314/JNTF.2018.044">link&lt;/a>]&lt;/li>
&lt;li>X. Cui, S. Kojaku, N. Masuda, and D. Bollegala, in Proceedings of the 7th Joint Conference on Lexical and Computational Semantics, 225-264 (ACL, New Orleans, USA, 2018) [&lt;a href="https://doi.org/10.18653/v1/S18-2030">link&lt;/a>]&lt;/li>
&lt;li>S. Kojaku, M. Xu, H. Xia, N. Masuda, `Preprint arXiv:1808.04549 (2018) [&lt;a href="https://arxiv.org/abs/1808.04549">link&lt;/a>]&lt;/li>
&lt;li>S. Kojaku and N. Masuda, `New Journal of Physics 20, 043012 (2018) [&lt;a href="https://doi.org/10.1088/1367-2630/aab547">link&lt;/a>]&lt;/li>
&lt;/ol></description></item><item><title>Constructing networks from correlation matrices</title><link>https://example.org/research/correlation-matrix/</link><pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate><author>skojaku@iu.edu (Sadamori Kojaku)</author><guid isPermaLink="true">https://example.org/research/correlation-matrix/</guid><description>&lt;p>*S. Kojaku and N. Masuda. Proceedings of the Royal Society A, 475, 2231 (2019)*&lt;br>
&lt;em>Naoki Masuda, Sadamori Kojaku, Yukie Sano. Physical Review E, 98, 012312 (2018)&lt;/em>&lt;/p>
&lt;p>Many networks of scientific interest have been constructed from correlation matrices.
Examples include protein interaction networks, gene co-expression networks, functional brain networks, climate networks and asset graphs.
In correlation networks, the edges indicate nontrivial correlations between the features of the nodes.
A widely accepted approach for constructing networks from correlation matrices is the thresholding; one places an edge between two nodes if the correlation is larger than a threshold.
However, the thresholding may induce spurious edges in the generated networks because a large correlation may be induced by a factor irrelevant to the node pair such as a global trend and pseudo correlations.
An example is a large correlation between ice cream sale and murder rate; people buy more ice cream and interact with more people when it is hotter.&lt;/p>
&lt;p>We developed an algorithm for constructing networks from correlation matrices, which we refer to as &lt;a href="https://scola.readthedocs.io/en/latest/">Scola&lt;/a>.
A key feature of the algorithm is to use the null models for correlation matrices, based on which we decide whether to place edges between nodes or not.
In other words, we place edges between nodes whose correlations are &lt;em>unexpected&lt;/em> for the null models.
Users can run the algorithm with a null model of interest or let the algorithm to choose statistically the best null model among candidate null models.
For three economic data, the algorithm produces statistically better networks and more accurately predicts country-level product export volumes.&lt;/p>
&lt;div align="center">
&lt;img style="width:100%;max-width:800px;padding:5px" src="https://example.org/docs/threshold-networks/adj.png" title="Correlation networks">
&lt;/div>
&lt;br>
**Figure**:
Sample correlation matrices and networks for the product space data.
The solid lines inside the matrices indicate the boundary between year *t* (first half) and year *t*+10 (second half).
The node colour indicates the product type.
The value of the PRODY index averaged over the nodes in the same type is shown in the parentheses.</description></item><item><title>About me</title><link>https://example.org/about/</link><pubDate>Mon, 11 Feb 2019 19:30:08 +1000</pubDate><author>skojaku@iu.edu (Sadamori Kojaku)</author><guid isPermaLink="true">https://example.org/about/</guid><description>&lt;h3 id="sadamori-kojaku">Sadamori Kojaku&lt;/h3>
&lt;p>&lt;img style="width:30%;max-width:500px;float:right;padding:5px" src="https://example.org/images/sada-2021.jpg#floatright" />&lt;/p>
&lt;p>Luddy School of Informatics, Computing, and Engineering,
Indiana University Bloomington&lt;/p>
&lt;h3 id="contact">Contact&lt;/h3>
&lt;p>&lt;a href="mailto:skojaku@iu.edu">skojaku@iu.edu&lt;/a>&lt;/p>
&lt;h3 id="cvdocscvcv-sadamori-kojakupdf">&lt;a href="https://example.org/docs/cv/cv-sadamori-kojaku.pdf">CV&lt;/a>&lt;/h3>
&lt;h3 id="employment--education">Employment &amp;amp; Education&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>02/2020-present&lt;/strong>: Postdoctoral Fellow
Indiana University, United States&lt;/li>
&lt;li>&lt;strong>04/2019-01/2020&lt;/strong>: Research Associate
Kobe University, Japan&lt;/li>
&lt;li>&lt;strong>04/2016-03/2019&lt;/strong>: Research Associate (Postdoc) @University of Bristol, UK&lt;/li>
&lt;li>&lt;strong>09/2015&lt;/strong>: Ph.d. in Computer science, Hokkaido University, Japan&lt;/li>
&lt;li>&lt;strong>03/2012&lt;/strong>: M.A. in Information science, Hokkaido University, Japan&lt;/li>
&lt;/ul>
&lt;h3 id="miscellaneous">Miscellaneous&lt;/h3>
&lt;ul>
&lt;li>Born in 01/01/1988&lt;/li>
&lt;li>Languages: English and Japanese&lt;/li>
&lt;li>Hobby:
&lt;ul>
&lt;li>Sailing: OP, Laser, 470 (start since age 8)&lt;/li>
&lt;li>Kendo (a Japanese martial art; since age 15)&lt;/li>
&lt;li>Marathon (since age 22)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Basic HTML Elements</title><link>https://example.org/posts/basic-elements/</link><pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate><author>skojaku@iu.edu (Sadamori Kojaku)</author><guid isPermaLink="true">https://example.org/posts/basic-elements/</guid><description>&lt;p>The main purpose of this article is to make sure that all basic HTML Elements are decorated with CSS so as to not miss any possible elements when creating new themes for Hugo.&lt;/p>
&lt;h2 id="headings">Headings&lt;/h2>
&lt;p>Let&amp;rsquo;s start with all possible headings. The HTML &lt;code>&amp;lt;h1&amp;gt;&lt;/code>—&lt;code>&amp;lt;h6&amp;gt;&lt;/code> elements represent six levels of section headings. &lt;code>&amp;lt;h1&amp;gt;&lt;/code> is the highest section level and &lt;code>&amp;lt;h6&amp;gt;&lt;/code> is the lowest.&lt;/p>
&lt;h1 id="heading-1">Heading 1&lt;/h1>
&lt;h2 id="heading-2">Heading 2&lt;/h2>
&lt;h3 id="heading-3">Heading 3&lt;/h3>
&lt;h4 id="heading-4">Heading 4&lt;/h4>
&lt;h5 id="heading-5">Heading 5&lt;/h5>
&lt;h6 id="heading-6">Heading 6&lt;/h6>
&lt;hr>
&lt;h2 id="paragraph">Paragraph&lt;/h2>
&lt;p>According to the &lt;a href="https://www.w3.org/TR/html5/dom.html#elements">HTML5 specification&lt;/a> by &lt;a href="https://www.w3.org/">W3C&lt;/a>, &lt;strong>HTML documents consist of a tree of elements and text&lt;/strong>. Each element is denoted in the source by a &lt;a href="https://www.w3.org/TR/html5/syntax.html#syntax-start-tags">start tag&lt;/a>, such as &lt;code>&amp;lt;body&amp;gt;&lt;/code>, and an &lt;a href="https://www.w3.org/TR/html5/syntax.html#syntax-end-tags">end tag&lt;/a>, such as &lt;code>&amp;lt;/body&amp;gt;&lt;/code>. (&lt;em>Certain start tags and end tags can in certain cases be omitted and are implied by other tags.&lt;/em>)&lt;/p>
&lt;p>Elements can have attributes, which control how the elements work. For example, hyperlink are formed using the &lt;code>a&lt;/code> element and its &lt;code>href&lt;/code> attribute.&lt;/p>
&lt;h2 id="list-types">List Types&lt;/h2>
&lt;h3 id="ordered-list">Ordered List&lt;/h3>
&lt;ol>
&lt;li>First item&lt;/li>
&lt;li>Second item&lt;/li>
&lt;li>Third item&lt;/li>
&lt;/ol>
&lt;h3 id="unordered-list">Unordered List&lt;/h3>
&lt;ul>
&lt;li>List item&lt;/li>
&lt;li>Another item&lt;/li>
&lt;li>And another item&lt;/li>
&lt;/ul>
&lt;h3 id="nested-list">Nested list&lt;/h3>
&lt;ul>
&lt;li>First item&lt;/li>
&lt;li>Second item
&lt;ul>
&lt;li>Second item First subitem&lt;/li>
&lt;li>Second item second subitem
&lt;ul>
&lt;li>Second item Second subitem First sub-subitem&lt;/li>
&lt;li>Second item Second subitem Second sub-subitem&lt;/li>
&lt;li>Second item Second subitem Third sub-subitem&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Second item Third subitem
&lt;ol>
&lt;li>Second item Third subitem First sub-subitem&lt;/li>
&lt;li>Second item Third subitem Second sub-subitem&lt;/li>
&lt;li>Second item Third subitem Third sub-subitem&lt;/li>
&lt;/ol>
&lt;/ul>
&lt;/li>
&lt;li>Third item&lt;/li>
&lt;/ul>
&lt;h3 id="definition-list">Definition List&lt;/h3>
&lt;p>HTML also supports definition lists.&lt;/p>
&lt;dl>
&lt;dt>Blanco tequila&lt;/dt>
&lt;dd>The purest form of the blue agave spirit...&lt;/dd>
&lt;dt>Reposado tequila&lt;/dt>
&lt;dd>Typically aged in wooden barrels for between two and eleven months...&lt;/dd>
&lt;/dl>
&lt;h2 id="blockquotes">Blockquotes&lt;/h2>
&lt;p>The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a &lt;code>footer&lt;/code> or &lt;code>cite&lt;/code> element, and optionally with in-line changes such as annotations and abbreviations.&lt;/p>
&lt;blockquote>
&lt;p>Quoted text.
This line is part of the same quote.
Also you can &lt;em>put&lt;/em> &lt;strong>Markdown&lt;/strong> into a blockquote.&lt;/p>
&lt;/blockquote>
&lt;p>Blockquote with a citation.&lt;/p>
&lt;blockquote>
&lt;p>My goal wasn't to make a ton of money. It was to build good computers. I only started the company when I realized I could be an engineer forever.&lt;/p>
&lt;footer>— &lt;cite>Steve Wozniak&lt;/cite>&lt;/footer>
&lt;/blockquote>
&lt;p>According to Mozilla&amp;rsquo;s website, &lt;q cite="https://www.mozilla.org/en-US/about/history/details/">Firefox 1.0 was released in 2004 and became a big success.&lt;/q>&lt;/p>
&lt;h2 id="tables">Tables&lt;/h2>
&lt;p>Tables aren&amp;rsquo;t part of the core Markdown spec, but Hugo supports them.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>ID&lt;/th>
&lt;th>Make&lt;/th>
&lt;th>Model&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>Honda&lt;/td>
&lt;td>Accord&lt;/td>
&lt;td>2009&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>Toyota&lt;/td>
&lt;td>Camry&lt;/td>
&lt;td>2012&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>Hyundai&lt;/td>
&lt;td>Elantra&lt;/td>
&lt;td>2010&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Colons can be used to align columns.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">Tables&lt;/th>
&lt;th align="center">Are&lt;/th>
&lt;th align="right">Cool&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">align: left&lt;/td>
&lt;td align="center">align: center&lt;/td>
&lt;td align="right">align: right&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">align: left&lt;/td>
&lt;td align="center">align: center&lt;/td>
&lt;td align="right">align: right&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">align: left&lt;/td>
&lt;td align="center">align: center&lt;/td>
&lt;td align="right">align: right&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>You can also use inline Markdown.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Inline&lt;/th>
&lt;th>Markdown&lt;/th>
&lt;th>In&lt;/th>
&lt;th>Table&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;em>italics&lt;/em>&lt;/td>
&lt;td>&lt;strong>bold&lt;/strong>&lt;/td>
&lt;td>&lt;del>strikethrough&lt;/del>&lt;/td>
&lt;td>&lt;code>code&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="code">Code&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span class="p">&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Example HTML5 Document&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Test&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span class="p">&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Example HTML5 Document&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Test&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="other-stuff--abbr-sub-sup-kbd-etc">Other stuff — abbr, sub, sup, kbd, etc.&lt;/h2>
&lt;p>&lt;abbr title="Graphics Interchange Format">GIF&lt;/abbr> is a bitmap image format.&lt;/p>
&lt;p>H&lt;sub>2&lt;/sub>O&lt;/p>
&lt;p>C&lt;sub>6&lt;/sub>H&lt;sub>12&lt;/sub>O&lt;sub>6&lt;/sub>&lt;/p>
&lt;p>X&lt;sup>n&lt;/sup> + Y&lt;sup>n&lt;/sup> = Z&lt;sup>n&lt;/sup>&lt;/p>
&lt;p>Press &lt;kbd>X&lt;/kbd> to win. Or press &lt;kbd>&lt;kbd>CTRL&lt;/kbd>+&lt;kbd>ALT&lt;/kbd>+&lt;kbd>F&lt;/kbd>&lt;/kbd> to show FPS counter.&lt;/p>
&lt;p>&lt;mark>As a unit of information in information theory, the bit has alternatively been called a shannon&lt;/mark>, named after Claude Shannon, the founder of field of information theory.&lt;/p></description></item><item><title>Creating a New Theme</title><link>https://example.org/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><author>skojaku@iu.edu (Sadamori Kojaku)</author><guid isPermaLink="true">https://example.org/posts/creating-a-new-theme/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.&lt;/p>
&lt;p>We&amp;rsquo;ll start with creating a new site with a very basic template. Then we&amp;rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.&lt;/p>
&lt;p>In this tutorial, commands that you enter will start with the &amp;ldquo;$&amp;rdquo; prompt. The output will follow. Lines that start with &amp;ldquo;#&amp;rdquo; are comments that I&amp;rsquo;ve added to explain a point. When I show updates to a file, the &amp;ldquo;:wq&amp;rdquo; on the last line means to save the file.&lt;/p>
&lt;p>Here&amp;rsquo;s an example:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">## this is a comment
$ echo this is a command
this is a command
## edit the file
$ vi foo.md
+++
date = &amp;#34;2014-09-28&amp;#34;
title = &amp;#34;creating a new theme&amp;#34;
+++
bah and humbug
:wq
## show it
$ cat foo.md
+++
date = &amp;#34;2014-09-28&amp;#34;
title = &amp;#34;creating a new theme&amp;#34;
+++
bah and humbug
$
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="some-definitions">Some Definitions&lt;/h2>
&lt;p>There are a few concepts that you need to understand before creating a theme.&lt;/p>
&lt;h3 id="skins">Skins&lt;/h3>
&lt;p>Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.&lt;/p>
&lt;p>You have two ways to create a skin. The simplest way is to create it in the &lt;code>layouts/&lt;/code> directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the &lt;code>layouts/&lt;/code> directory so it will always find the skin.&lt;/p>
&lt;p>Your second choice is to create it in a sub-directory of the &lt;code>themes/&lt;/code> directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?&lt;/p>
&lt;p>The difference between creating a skin in &lt;code>layouts/&lt;/code> and creating it in &lt;code>themes/&lt;/code> is very subtle. A skin in &lt;code>layouts/&lt;/code> can’t be customized without updating the templates and static files that it is built from. A skin created in &lt;code>themes/&lt;/code>, on the other hand, can be and that makes it easier for other people to use it.&lt;/p>
&lt;p>The rest of this tutorial will call a skin created in the &lt;code>themes/&lt;/code> directory a theme.&lt;/p>
&lt;p>Note that you can use this tutorial to create a skin in the &lt;code>layouts/&lt;/code> directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.&lt;/p>
&lt;h3 id="the-home-page">The Home Page&lt;/h3>
&lt;p>The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.&lt;/p>
&lt;h3 id="site-configuration-file">Site Configuration File&lt;/h3>
&lt;p>When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.&lt;/p>
&lt;p>Hugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your &lt;code>content/&lt;/code> directory and template files in your &lt;code>themes/&lt;/code> directory. It will create HTML files in your &lt;code>public/&lt;/code> directory. You can change this by specifying alternate locations in the configuration file.&lt;/p>
&lt;h3 id="content">Content&lt;/h3>
&lt;p>Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.&lt;/p>
&lt;h4 id="front-matter">Front Matter&lt;/h4>
&lt;p>The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “&lt;code>+++&lt;/code>”, YAML by “&lt;code>---&lt;/code>”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.&lt;/p>
&lt;p>The information in the front matter is passed into the template before the content is rendered into HTML.&lt;/p>
&lt;h4 id="markdown">Markdown&lt;/h4>
&lt;p>Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.&lt;/p>
&lt;h3 id="template-files">Template Files&lt;/h3>
&lt;p>Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it&amp;rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.&lt;/p>
&lt;p>There are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.&lt;/p>
&lt;p>Hugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.&lt;/p>
&lt;p>Please note that you can use the front matter to influence Hugo’s choice of templates.&lt;/p>
&lt;h4 id="single-template">Single Template&lt;/h4>
&lt;p>A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.&lt;/p>
&lt;h4 id="list-template">List Template&lt;/h4>
&lt;p>A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.&lt;/p>
&lt;p>The homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.&lt;/p>
&lt;h4 id="partial-template">Partial Template&lt;/h4>
&lt;p>A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.&lt;/p>
&lt;h2 id="create-a-new-site">Create a New Site&lt;/h2>
&lt;p>Let&amp;rsquo;s use Hugo to create a new web site. I&amp;rsquo;m a Mac user, so I&amp;rsquo;ll create mine in my home directory, in the Sites folder. If you&amp;rsquo;re using Linux, you might have to create the folder first.&lt;/p>
&lt;p>The &amp;ldquo;new site&amp;rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ hugo new site ~/Sites/zafta
$ cd ~/Sites/zafta
$ ls -l
total 8
drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 .
drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 ..
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes
-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static
$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Take a look in the content/ directory to confirm that it is empty.&lt;/p>
&lt;p>The other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That&amp;rsquo;s a topic for a different tutorial, so please ignore them for now.&lt;/p>
&lt;h3 id="generate-the-html-for-the-new-site">Generate the HTML For the New Site&lt;/h3>
&lt;p>Running the &lt;code>hugo&lt;/code> command with no options will read all the available content and generate the HTML files. It will also copy all static files (that&amp;rsquo;s everything that&amp;rsquo;s not content). Since we have an empty site, it won&amp;rsquo;t do much, but it will do it very quickly.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ hugo --verbose
INFO: 2014/09/29 Using config file: config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &amp;ldquo;&lt;code>--verbose&lt;/code>&amp;rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with &amp;ldquo;INFO:&amp;rdquo; or &amp;ldquo;WARN:&amp;rdquo; is present because we used that flag. The lines that start with &amp;ldquo;WARN:&amp;rdquo; are warning messages. We&amp;rsquo;ll go over them later.&lt;/p>
&lt;p>We can verify that the command worked by looking at the directory again.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ ls -l
total 8
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes
-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts
drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static
$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>See that new public/ directory? Hugo placed all generated content there. When you&amp;rsquo;re ready to publish your web site, that&amp;rsquo;s the place to start. For now, though, let&amp;rsquo;s just confirm that we have what we&amp;rsquo;d expect from a site with no content.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ ls -l public
total 16
-rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml
-rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml
$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hugo created two XML files, which is standard, but there are no HTML files.&lt;/p>
&lt;h3 id="test-the-new-site">Test the New Site&lt;/h3>
&lt;p>Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the &amp;ldquo;server&amp;rdquo; command. If it is successful, you will see output similar to the following:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ hugo server --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Connect to the listed URL (it&amp;rsquo;s on the line that starts with &amp;ldquo;Web Server&amp;rdquo;). If everything is working correctly, you should get a page that shows the following:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">index.xml
sitemap.xml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s a listing of your public/ directory. Hugo didn&amp;rsquo;t create a home page because our site has no content. When there&amp;rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.&lt;/p>
&lt;p>Let’s go back and look at those warnings again.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.&lt;/p>
&lt;p>Now for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.&lt;/p>
&lt;p>I like that the verbose flag causes Hugo to list the files that it&amp;rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we&amp;rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn&amp;rsquo;t find a template for the home page and it told you so.&lt;/p>
&lt;p>At this point, you&amp;rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.&lt;/p>
&lt;h2 id="create-a-new-theme">Create a New Theme&lt;/h2>
&lt;p>Hugo doesn&amp;rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.&lt;/p>
&lt;p>We&amp;rsquo;re going to create a new theme called &amp;ldquo;zafta.&amp;rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.&lt;/p>
&lt;p>All themes have opinions on content and layout. For example, Zafta uses &amp;ldquo;post&amp;rdquo; over &amp;ldquo;blog&amp;rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.&lt;/p>
&lt;h3 id="create-a-skeleton">Create a Skeleton&lt;/h3>
&lt;p>Use the hugo &amp;ldquo;new&amp;rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ hugo new theme zafta
$ ls -l
total 8
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes
-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts
drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static
drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes
$ find themes -type f | xargs ls -l
-rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
-rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml
$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.&lt;/p>
&lt;p>Please take a minute to fill out the theme.toml and LICENSE.md files. They&amp;rsquo;re optional, but if you&amp;rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It&amp;rsquo;s also nice to declare the license so that people will know how they can use the theme.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ vi themes/zafta/theme.toml
author = &amp;#34;michael d henderson&amp;#34;
description = &amp;#34;a minimal working template&amp;#34;
license = &amp;#34;MIT&amp;#34;
name = &amp;#34;zafta&amp;#34;
source_repo = &amp;#34;&amp;#34;
tags = [&amp;#34;tags&amp;#34;, &amp;#34;categories&amp;#34;]
:wq
## also edit themes/zafta/LICENSE.md and change
## the bit that says &amp;#34;YOUR_NAME_HERE&amp;#34;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that the the skeleton&amp;rsquo;s template files are empty. Don&amp;rsquo;t worry, we&amp;rsquo;ll be changing that shortly.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ find themes/zafta -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
$
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="update-the-configuration-file-to-use-the-theme">Update the Configuration File to Use the Theme&lt;/h3>
&lt;p>Now that we&amp;rsquo;ve got a theme to work with, it&amp;rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add &amp;ldquo;-t zafta&amp;rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don&amp;rsquo;t put it in the configuration file or specify it on the command line, you won&amp;rsquo;t use the template that you&amp;rsquo;re expecting to.&lt;/p>
&lt;p>Edit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ vi config.toml
theme = &amp;#34;zafta&amp;#34;
baseurl = &amp;#34;&amp;#34;
languageCode = &amp;#34;en-us&amp;#34;
title = &amp;#34;zafta - totally refreshing&amp;#34;
MetaDataFormat = &amp;#34;toml&amp;#34;
:wq
$
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="generate-the-site">Generate the Site&lt;/h3>
&lt;p>Now that we have an empty theme, let&amp;rsquo;s generate the site again.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme&amp;rsquo;s directory.&lt;/p>
&lt;p>Let&amp;rsquo;s check the public/ directory to see what Hugo&amp;rsquo;s created.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ ls -l public
total 16
drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css
-rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html
-rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml
drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js
-rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml
$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice four things:&lt;/p>
&lt;ol>
&lt;li>Hugo created a home page. This is the file public/index.html.&lt;/li>
&lt;li>Hugo created a css/ directory.&lt;/li>
&lt;li>Hugo created a js/ directory.&lt;/li>
&lt;li>Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn&amp;rsquo;t create any pages. That&amp;rsquo;s because it considers a &amp;ldquo;page&amp;rdquo; to be a file created directly from a content file. It doesn&amp;rsquo;t count things like the index.html files that it creates automatically.&lt;/li>
&lt;/ol>
&lt;h4 id="the-home-page-1">The Home Page&lt;/h4>
&lt;p>Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo&amp;rsquo;s warning message shows that it looks for three different templates:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If it can&amp;rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.&lt;/p>
&lt;p>When Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ find . -name index.html | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html
$
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="the-magic-of-static">The Magic of Static&lt;/h4>
&lt;p>Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.&lt;/p>
&lt;p>Hugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo&amp;rsquo;s opinion is that you&amp;rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don&amp;rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo&amp;rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ find themes/zafta -type d | xargs ls -ld
drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta
drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes
drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts
drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default
drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials
drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static
drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css
drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js
$
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="the-theme-development-cycle">The Theme Development Cycle&lt;/h2>
&lt;p>When you&amp;rsquo;re working on a theme, you will make changes in the theme&amp;rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:&lt;/p>
&lt;ol>
&lt;li>Purge the public/ directory.&lt;/li>
&lt;li>Run the built in web server in watch mode.&lt;/li>
&lt;li>Open your site in a browser.&lt;/li>
&lt;li>Update the theme.&lt;/li>
&lt;li>Glance at your browser window to see changes.&lt;/li>
&lt;li>Return to step 4.&lt;/li>
&lt;/ol>
&lt;p>I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.&lt;/p>
&lt;p>Check the main Hugo site for information on using Git with Hugo.&lt;/p>
&lt;h3 id="purge-the-public-directory">Purge the public/ Directory&lt;/h3>
&lt;p>When generating the site, Hugo will create new files and update existing ones in the &lt;code>public/&lt;/code> directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.&lt;/p>
&lt;p>Note: If you&amp;rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.&lt;/p>
&lt;h3 id="hugos-watch-option">Hugo&amp;rsquo;s Watch Option&lt;/h3>
&lt;p>Hugo&amp;rsquo;s &amp;ldquo;&lt;code>--watch&lt;/code>&amp;rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.&lt;/p>
&lt;h3 id="live-reload">Live Reload&lt;/h3>
&lt;p>Hugo&amp;rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, &amp;ldquo;Wow, that&amp;rsquo;s totally amazing.&amp;rdquo;&lt;/p>
&lt;h3 id="development-commands">Development Commands&lt;/h3>
&lt;p>Use the following commands as the basis for your workflow.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">## purge old files. hugo will recreate the public directory.
##
$ rm -rf public
##
## run hugo in watch mode
##
$ hugo server --watch --verbose
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here&amp;rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I&amp;rsquo;ve said this before, it&amp;rsquo;s amazing.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ rm -rf public
$ hugo server --watch --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Watching for changes in /Users/quoha/Sites/zafta/content
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
INFO: 2014/09/29 File System Event: [&amp;#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html&amp;#34;: MODIFY|ATTRIB]
Change detected, rebuilding site
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 1 ms
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="update-the-home-page-template">Update the Home Page Template&lt;/h2>
&lt;p>The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme&amp;rsquo;s layout/ directory:&lt;/p>
&lt;ol>
&lt;li>index.html&lt;/li>
&lt;li>_default/list.html&lt;/li>
&lt;li>_default/single.html&lt;/li>
&lt;/ol>
&lt;p>We could update one of the default templates, but a good design decision is to update the most specific template available. That&amp;rsquo;s not a hard and fast rule (in fact, we&amp;rsquo;ll break it a few times in this tutorial), but it is a good generalization.&lt;/p>
&lt;h3 id="make-a-static-home-page">Make a Static Home Page&lt;/h3>
&lt;p>Right now, that page is empty because we don&amp;rsquo;t have any content and we don&amp;rsquo;t have any logic in the template. Let&amp;rsquo;s change that by adding some text to the template.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Build the web site and then verify the results.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html
$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="live-reload-1">Live Reload&lt;/h4>
&lt;p>Note: If you&amp;rsquo;re running the server with the &lt;code>--watch&lt;/code> option, you&amp;rsquo;ll see different content in the file:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;script&amp;gt;document.write(&amp;#39;&amp;lt;script src=&amp;#34;http://&amp;#39;
+ (location.host || &amp;#39;localhost&amp;#39;).split(&amp;#39;:&amp;#39;)[0]
+ &amp;#39;:1313/livereload.js?mindelay=10&amp;#34;&amp;gt;&amp;lt;/&amp;#39;
+ &amp;#39;script&amp;gt;&amp;#39;)&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When you use &lt;code>--watch&lt;/code>, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.&lt;/p>
&lt;h3 id="build-a-dynamic-home-page">Build a &amp;ldquo;Dynamic&amp;rdquo; Home Page&lt;/h3>
&lt;p>&amp;ldquo;Dynamic home page?&amp;rdquo; Hugo&amp;rsquo;s a static web site generator, so this seems an odd thing to say. I mean let&amp;rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We&amp;rsquo;ll use iteration in the template to do that.&lt;/p>
&lt;h4 id="create-new-posts">Create New Posts&lt;/h4>
&lt;p>Now that we have the home page generating static content, let&amp;rsquo;s add some content to the site. We&amp;rsquo;ll display these posts as a list on the home page and on their own page, too.&lt;/p>
&lt;p>Hugo has a command to generate a skeleton post, just like it does for sites and themes.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md
ERROR: 2014/09/29 Unable to Cast &amp;lt;nil&amp;gt; to map[string]interface{}
$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That wasn&amp;rsquo;t very nice, was it?&lt;/p>
&lt;p>The &amp;ldquo;new&amp;rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there&amp;rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ vi themes/zafta/archetypes/post.md
+++
Description = &amp;#34;&amp;#34;
Tags = []
Categories = []
+++
:wq
$ find themes/zafta/archetypes -type f | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md
-rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md
$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md
/Users/quoha/Sites/zafta/content/post/first.md created
$ hugo --verbose new post/second.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create post/second.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md
/Users/quoha/Sites/zafta/content/post/second.md created
$ ls -l content/post
total 16
-rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md
-rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md
$ cat content/post/first.md
+++
Categories = []
Description = &amp;#34;&amp;#34;
Tags = []
date = &amp;#34;2014-09-29T21:54:53-05:00&amp;#34;
title = &amp;#34;first&amp;#34;
+++
my first post
$ cat content/post/second.md
+++
Categories = []
Description = &amp;#34;&amp;#34;
Tags = []
date = &amp;#34;2014-09-29T21:57:09-05:00&amp;#34;
title = &amp;#34;second&amp;#34;
+++
my second post
$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Build the web site and then verify the results.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;#34;category&amp;#34;:&amp;#34;categories&amp;#34;, &amp;#34;tag&amp;#34;:&amp;#34;tags&amp;#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The output says that it created 2 pages. Those are our new posts:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html
$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The new files are empty because because the templates used to generate the content are empty. The homepage doesn&amp;rsquo;t show the new content, either. We have to update the templates to add the posts.&lt;/p>
&lt;h3 id="list-and-single-templates">List and Single Templates&lt;/h3>
&lt;p>In Hugo, we have three major kinds of templates. There&amp;rsquo;s the home page template that we updated previously. It is used only by the home page. We also have &amp;ldquo;single&amp;rdquo; templates which are used to generate output for a single content file. We also have &amp;ldquo;list&amp;rdquo; templates that are used to group multiple pieces of content before generating output.&lt;/p>
&lt;p>Generally speaking, list templates are named &amp;ldquo;list.html&amp;rdquo; and single templates are named &amp;ldquo;single.html.&amp;rdquo;&lt;/p>
&lt;p>There are three other types of templates: partials, content views, and terms. We will not go into much detail on these.&lt;/p>
&lt;h3 id="add-content-to-the-homepage">Add Content to the Homepage&lt;/h3>
&lt;p>The home page will contain a list of posts. Let&amp;rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
{{ range first 10 .Data.Pages }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between &amp;ldquo;{{&amp;rdquo; and &amp;ldquo;}}&amp;quot;. In our template, the commands are:&lt;/p>
&lt;ol>
&lt;li>range&lt;/li>
&lt;li>.Title&lt;/li>
&lt;li>end&lt;/li>
&lt;/ol>
&lt;p>The &amp;ldquo;range&amp;rdquo; command is an iterator. We&amp;rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.&lt;/p>
&lt;p>The &amp;ldquo;.Title&amp;rdquo; command prints the value of the &amp;ldquo;title&amp;rdquo; variable. Hugo pulls it from the front matter in the Markdown file.&lt;/p>
&lt;p>The &amp;ldquo;end&amp;rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds &amp;ldquo;end.&amp;rdquo; Everything between the &amp;ldquo;range&amp;rdquo; and &amp;ldquo;end&amp;rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.&lt;/p>
&lt;p>It&amp;rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.&lt;/p>
&lt;p>Build the web site and then verify the results.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;#34;tag&amp;#34;:&amp;#34;tags&amp;#34;, &amp;#34;category&amp;#34;:&amp;#34;categories&amp;#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html
$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;second&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;first&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let&amp;rsquo;s take a moment to appreciate what we&amp;rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you&amp;rsquo;ve learned everything you need to know to build a theme. All that&amp;rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.&lt;/p>
&lt;p>And, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don&amp;rsquo;t worry, though, that&amp;rsquo;s all to come.&lt;/p>
&lt;h3 id="add-content-to-the-posts">Add Content to the Posts&lt;/h3>
&lt;p>We&amp;rsquo;re working with posts, which are in the content/post/ directory. That means that their section is &amp;ldquo;post&amp;rdquo; (and if we don&amp;rsquo;t do something weird, their type is also &amp;ldquo;post&amp;rdquo;).&lt;/p>
&lt;p>Hugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can&amp;rsquo;t find one, then it will look in the _default/ directory. There are some twists that we&amp;rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.&lt;/p>
&lt;p>Now that we know the search rule, let&amp;rsquo;s see what we actually have available:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ find themes/zafta -name single.html | xargs ls -l
-rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We could create a new template, post/single.html, or change the default. Since we don&amp;rsquo;t know of any other content types, let&amp;rsquo;s start with updating the default.&lt;/p>
&lt;p>Remember, any content that we haven&amp;rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we&amp;rsquo;re going to be adding different types of content and we&amp;rsquo;re going to end up undoing some of the changes we&amp;rsquo;ve made. It&amp;rsquo;s good because we&amp;rsquo;ll be able to see immediate results. It&amp;rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we&amp;rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we&amp;rsquo;ll accept the cost and proceed.&lt;/p>
&lt;p>Please see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you&amp;rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That&amp;rsquo;s a refreshing amount of joy right there.&lt;/p>
&lt;h4 id="update-the-template-file">Update the Template File&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ vi themes/zafta/layouts/_default/single.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ .Content }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Build the web site and verify the results.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;#34;tag&amp;#34;:&amp;#34;tags&amp;#34;, &amp;#34;category&amp;#34;:&amp;#34;categories&amp;#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html
-rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html
-rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html
$ cat public/post/first/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;first&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;first&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;my first post&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$ cat public/post/second/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;second&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;second&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;my second post&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice that the posts now have content. You can go to localhost:1313/post/first to verify.&lt;/p>
&lt;h3 id="linking-to-content">Linking to Content&lt;/h3>
&lt;p>The posts are on the home page. Let&amp;rsquo;s add a link from there to the post. Since this is the home page, we&amp;rsquo;ll update its template.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
{{ range first 10 .Data.Pages }}
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
{{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Build the web site and verify the results.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;#34;tag&amp;#34;:&amp;#34;tags&amp;#34;, &amp;#34;category&amp;#34;:&amp;#34;categories&amp;#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html
-rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html
-rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html
$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;/post/second/&amp;#34;&amp;gt;second&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;/post/first/&amp;#34;&amp;gt;first&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="create-a-post-listing">Create a Post Listing&lt;/h3>
&lt;p>We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let&amp;rsquo;s make it show a list of all posts (not just the first ten).&lt;/p>
&lt;p>We need to decide which template to update. This will be a listing, so it should be a list template. Let&amp;rsquo;s take a quick look and see which list templates are available.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ find themes/zafta -name list.html | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don&amp;rsquo;t have multiple content types, so let&amp;rsquo;s stay consistent and update the default list template.&lt;/p>
&lt;h2 id="creating-top-level-pages">Creating Top Level Pages&lt;/h2>
&lt;p>Let&amp;rsquo;s add an &amp;ldquo;about&amp;rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).&lt;/p>
&lt;p>The default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let&amp;rsquo;s verify that by creating an &amp;ldquo;about&amp;rdquo; page at the top level:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ vi content/about.md
+++
title = &amp;#34;about&amp;#34;
description = &amp;#34;about this site&amp;#34;
date = &amp;#34;2014-09-27&amp;#34;
slug = &amp;#34;about time&amp;#34;
+++
## about us
i&amp;#39;m speechless
:wq
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Generate the web site and verify the results.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ find public -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html
-rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html
-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html
-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html
-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice that the page wasn&amp;rsquo;t created at the top level. It was created in a sub-directory named &amp;lsquo;about-time/'. That name came from our slug. Hugo will use the slug to name the generated content. It&amp;rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.&lt;/p>
&lt;p>One other thing. Take a look at the home page.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;http://localhost:1313/post/theme/&amp;#34;&amp;gt;creating a new theme&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;http://localhost:1313/about-time/&amp;#34;&amp;gt;about&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;http://localhost:1313/post/second-post/&amp;#34;&amp;gt;second&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;http://localhost:1313/post/first-post/&amp;#34;&amp;gt;first&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;script&amp;gt;document.write(&amp;#39;&amp;lt;script src=&amp;#34;http://&amp;#39;
+ (location.host || &amp;#39;localhost&amp;#39;).split(&amp;#39;:&amp;#39;)[0]
+ &amp;#39;:1313/livereload.js?mindelay=10&amp;#34;&amp;gt;&amp;lt;/&amp;#39;
+ &amp;#39;script&amp;gt;&amp;#39;)&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice that the &amp;ldquo;about&amp;rdquo; link is listed with the posts? That&amp;rsquo;s not desirable, so let&amp;rsquo;s change that first.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;posts&amp;lt;/h1&amp;gt;
{{ range first 10 .Data.Pages }}
{{ if eq .Type &amp;#34;post&amp;#34;}}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
&amp;lt;h1&amp;gt;pages&amp;lt;/h1&amp;gt;
{{ range .Data.Pages }}
{{ if eq .Type &amp;#34;page&amp;#34; }}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.&lt;/p>
&lt;p>But, that about page still renders to about-time/index.html.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ find public -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html
-rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html
-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html
-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html
-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let&amp;rsquo;s do it the hard way and change the permalink in the configuration file.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ vi config.toml
[permalinks]
page = &amp;#34;/:title/&amp;#34;
about = &amp;#34;/:filename/&amp;#34;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Generate the web site and verify that this didn&amp;rsquo;t work. Hugo lets &amp;ldquo;slug&amp;rdquo; or &amp;ldquo;URL&amp;rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.&lt;/p>
&lt;h2 id="sharing-templates">Sharing Templates&lt;/h2>
&lt;p>If you&amp;rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn&amp;rsquo;t. That&amp;rsquo;s because we didn&amp;rsquo;t put the title in the home page&amp;rsquo;s template (layouts/index.html). That&amp;rsquo;s an easy thing to do, but let&amp;rsquo;s look at a different option.&lt;/p>
&lt;p>We can put the common bits into a shared template that&amp;rsquo;s stored in the themes/zafta/layouts/partials/ directory.&lt;/p>
&lt;h3 id="create-the-header-and-footer-partials">Create the Header and Footer Partials&lt;/h3>
&lt;p>In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme&amp;rsquo;s presentation.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ vi themes/zafta/layouts/partials/header.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
:wq
$ vi themes/zafta/layouts/partials/footer.html
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="update-the-home-page-template-to-use-the-partials">Update the Home Page Template to Use the Partials&lt;/h3>
&lt;p>The most noticeable difference between a template call and a partials call is the lack of path:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">{{ template &amp;#34;theme/partials/header.html&amp;#34; . }}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>versus&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">{{ partial &amp;#34;header.html&amp;#34; . }}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Both pass in the context.&lt;/p>
&lt;p>Let&amp;rsquo;s change the home page template to use these new partials.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ vi themes/zafta/layouts/index.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;posts&amp;lt;/h1&amp;gt;
{{ range first 10 .Data.Pages }}
{{ if eq .Type &amp;#34;post&amp;#34;}}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
&amp;lt;h1&amp;gt;pages&amp;lt;/h1&amp;gt;
{{ range .Data.Pages }}
{{ if or (eq .Type &amp;#34;page&amp;#34;) (eq .Type &amp;#34;about&amp;#34;) }}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Generate the web site and verify the results. The title on the home page is now &amp;ldquo;your title here&amp;rdquo;, which comes from the &amp;ldquo;title&amp;rdquo; variable in the config.toml file.&lt;/p>
&lt;h3 id="update-the-default-single-template-to-use-the-partials">Update the Default Single Template to Use the Partials&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ .Content }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.&lt;/p>
&lt;h2 id="add-date-published-to-posts">Add “Date Published” to Posts&lt;/h2>
&lt;p>It&amp;rsquo;s common to have posts display the date that they were written or published, so let&amp;rsquo;s add that. The front matter of our posts has a variable named &amp;ldquo;date.&amp;rdquo; It&amp;rsquo;s usually the date the content was created, but let&amp;rsquo;s pretend that&amp;rsquo;s the value we want to display.&lt;/p>
&lt;h3 id="add-date-published-to-the-template">Add “Date Published” to the Template&lt;/h3>
&lt;p>We&amp;rsquo;ll start by updating the template used to render the posts. The template code will look like:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">{{ .Date.Format &amp;#34;Mon, Jan 2, 2006&amp;#34; }}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Posts use the default single template, so we&amp;rsquo;ll change that file.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;{{ .Date.Format &amp;#34;Mon, Jan 2, 2006&amp;#34; }}&amp;lt;/h2&amp;gt;
{{ .Content }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Generate the web site and verify the results. The posts now have the date displayed in them. There&amp;rsquo;s a problem, though. The &amp;ldquo;about&amp;rdquo; page also has the date displayed.&lt;/p>
&lt;p>As usual, there are a couple of ways to make the date display only on posts. We could do an &amp;ldquo;if&amp;rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.&lt;/p>
&lt;p>The &amp;ldquo;if&amp;rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of &amp;ldquo;code for today,&amp;rdquo; too.&lt;/p>
&lt;p>Let&amp;rsquo;s assume, though, that we&amp;rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we&amp;rsquo;re going to create a section template.&lt;/p>
&lt;p>Let&amp;rsquo;s restore the default single template before we forget.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ mkdir themes/zafta/layouts/post
$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ .Content }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we&amp;rsquo;ll update the post&amp;rsquo;s version of the single template. If you remember Hugo&amp;rsquo;s rules, the template engine will use this version over the default.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ vi themes/zafta/layouts/post/single.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;{{ .Date.Format &amp;#34;Mon, Jan 2, 2006&amp;#34; }}&amp;lt;/h2&amp;gt;
{{ .Content }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn&amp;rsquo;t.&lt;/p>
&lt;h3 id="dont-repeat-yourself">Don&amp;rsquo;t Repeat Yourself&lt;/h3>
&lt;p>DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you&amp;rsquo;re figuring that out, accept that you&amp;rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it&amp;rsquo;s okay to delay splitting up a template.&lt;/p></description></item><item><title>Creating a New Theme</title><link>https://example.org/wiki/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><author>skojaku@iu.edu (Sadamori Kojaku)</author><guid isPermaLink="true">https://example.org/wiki/creating-a-new-theme/</guid><description/></item><item><title>Getting Started with Hugo</title><link>https://example.org/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 23:42:05 +0100</pubDate><author>skojaku@iu.edu (Sadamori Kojaku)</author><guid isPermaLink="true">https://example.org/posts/hugoisforlovers/</guid><description>&lt;h2 id="step-1-install-hugo">Step 1. Install Hugo&lt;/h2>
&lt;p>Go to &lt;a href="https://github.com/spf13/hugo/releases">Hugo releases&lt;/a> and download the
appropriate version for your OS and architecture.&lt;/p>
&lt;p>Save it somewhere specific as we will be using it in the next step.&lt;/p>
&lt;p>More complete instructions are available at &lt;a href="https://gohugo.io/getting-started/installing/">Install Hugo&lt;/a>&lt;/p>
&lt;h2 id="step-2-build-the-docs">Step 2. Build the Docs&lt;/h2>
&lt;p>Hugo has its own example site which happens to also be the documentation site
you are reading right now.&lt;/p>
&lt;p>Follow the following steps:&lt;/p>
&lt;ol>
&lt;li>Clone the &lt;a href="https://github.com/spf13/hugo">Hugo repository&lt;/a>&lt;/li>
&lt;li>Go into the repo&lt;/li>
&lt;li>Run hugo in server mode and build the docs&lt;/li>
&lt;li>Open your browser to http://localhost:1313&lt;/li>
&lt;/ol>
&lt;p>Corresponding pseudo commands:&lt;/p>
&lt;pre>&lt;code>git clone https://github.com/spf13/hugo
cd hugo
/path/to/where/you/installed/hugo server --source=./docs
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Press ctrl+c to stop
&lt;/code>&lt;/pre>
&lt;p>Once you&amp;rsquo;ve gotten here, follow along the rest of this page on your local build.&lt;/p>
&lt;h2 id="step-3-change-the-docs-site">Step 3. Change the docs site&lt;/h2>
&lt;p>Stop the Hugo process by hitting Ctrl+C.&lt;/p>
&lt;p>Now we are going to run hugo again, but this time with hugo in watch mode.&lt;/p>
&lt;pre>&lt;code>/path/to/hugo/from/step/1/hugo server --source=./docs --watch
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&amp;gt; Press ctrl+c to stop
&lt;/code>&lt;/pre>
&lt;p>Open your &lt;a href="http://vim.spf13.com">favorite editor&lt;/a> and change one of the source
content pages. How about changing this very file to &lt;em>fix the typo&lt;/em>. How about changing this very file to &lt;em>fix the typo&lt;/em>.&lt;/p>
&lt;p>Content files are found in &lt;code>docs/content/&lt;/code>. Unless otherwise specified, files
are located at the same relative location as the url, in our case
&lt;code>docs/content/overview/quickstart.md&lt;/code>.&lt;/p>
&lt;p>Change and save this file.. Notice what happened in your terminal.&lt;/p>
&lt;pre>&lt;code>&amp;gt; Change detected, rebuilding site
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 26 ms
&lt;/code>&lt;/pre>
&lt;p>Refresh the browser and observe that the typo is now fixed.&lt;/p>
&lt;p>Notice how quick that was. Try to refresh the site before it&amp;rsquo;s finished building. I double dare you.
Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.&lt;/p>
&lt;h2 id="step-4-have-fun">Step 4. Have fun&lt;/h2>
&lt;p>The best way to learn something is to play with it.&lt;/p></description></item><item><title>(Hu)go Template Primer</title><link>https://example.org/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><author>skojaku@iu.edu (Sadamori Kojaku)</author><guid isPermaLink="true">https://example.org/posts/goisforlovers/</guid><description>&lt;p>Hugo uses the excellent &lt;a href="https://golang.org/">Go&lt;/a> &lt;a href="https://golang.org/pkg/html/template/">html/template&lt;/a> library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in Go templates.&lt;/p>
&lt;p>This document is a brief primer on using Go templates. The &lt;a href="https://golang.org/pkg/html/template/">Go docs&lt;/a>
provide more details.&lt;/p>
&lt;h2 id="introduction-to-go-templates">Introduction to Go Templates&lt;/h2>
&lt;p>Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that Go templates parse very quickly.&lt;/p>
&lt;p>A unique characteristic of Go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the &lt;a href="https://golang.org/pkg/html/template/">Go docs&lt;/a>.&lt;/p>
&lt;h2 id="basic-syntax">Basic Syntax&lt;/h2>
&lt;p>Golang templates are HTML files with the addition of variables and
functions.&lt;/p>
&lt;p>&lt;strong>Go variables and functions are accessible within {{ }}&lt;/strong>&lt;/p>
&lt;p>Accessing a predefined variable &amp;ldquo;foo&amp;rdquo;:&lt;/p>
&lt;pre>&lt;code>{{ foo }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Parameters are separated using spaces&lt;/strong>&lt;/p>
&lt;p>Calling the add function with input of 1, 2:&lt;/p>
&lt;pre>&lt;code>{{ add 1 2 }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Methods and fields are accessed via dot notation&lt;/strong>&lt;/p>
&lt;p>Accessing the Page Parameter &amp;ldquo;bar&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>{{ .Params.bar }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Parentheses can be used to group items together&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if or (isset .Params &amp;quot;alt&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;) }} Caption {{ end }}
&lt;/code>&lt;/pre>
&lt;h2 id="variables">Variables&lt;/h2>
&lt;p>Each Go template has a struct (object) made available to it. In hugo each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
&lt;a href="https://example.org/layout/variables">variables&lt;/a> page.&lt;/p>
&lt;p>A variable is accessed by referencing the variable name.&lt;/p>
&lt;pre>&lt;code>&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>Variables can also be defined and referenced.&lt;/p>
&lt;pre>&lt;code>{{ $address := &amp;quot;123 Main St.&amp;quot;}}
{{ $address }}
&lt;/code>&lt;/pre>
&lt;h2 id="functions">Functions&lt;/h2>
&lt;p>Go template ship with a few functions which provide basic functionality. The Go
template system also provides a mechanism for applications to extend the
available functions with their own. &lt;a href="https://example.org/layout/functions">Hugo template
functions&lt;/a> provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling hugo.&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ add 1 2 }}
&lt;/code>&lt;/pre>
&lt;h2 id="includes">Includes&lt;/h2>
&lt;p>When including another template you will pass to it the data it will be
able to access. To pass along the current context please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ template &amp;quot;chrome/header.html&amp;quot; . }}
&lt;/code>&lt;/pre>
&lt;h2 id="logic">Logic&lt;/h2>
&lt;p>Go templates provide the most basic iteration and conditional logic.&lt;/p>
&lt;h3 id="iteration">Iteration&lt;/h3>
&lt;p>Just like in Go, the Go templates make heavy use of range to iterate over
a map, array or slice. The following are different examples of how to use
range.&lt;/p>
&lt;p>&lt;strong>Example 1: Using Context&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ range array }}
{{ . }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 2: Declaring value variable name&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{range $element := array}}
{{ $element }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 2: Declaring key and value variable name&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{range $index, $element := array}}
{{ $index }}
{{ $element }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;h3 id="conditionals">Conditionals&lt;/h3>
&lt;p>If, else, with, or, &amp;amp; and provide the framework for handling conditional
logic in Go Templates. Like range, each statement is closed with &lt;code>end&lt;/code>.&lt;/p>
&lt;p>Go Templates treat the following values as false:&lt;/p>
&lt;ul>
&lt;li>false&lt;/li>
&lt;li>0&lt;/li>
&lt;li>any array, slice, map, or string of length zero&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Example 1: If&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if isset .Params &amp;quot;title&amp;quot; }}&amp;lt;h4&amp;gt;{{ index .Params &amp;quot;title&amp;quot; }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 2: If -&amp;gt; Else&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if isset .Params &amp;quot;alt&amp;quot; }}
{{ index .Params &amp;quot;alt&amp;quot; }}
{{else}}
{{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 3: And &amp;amp; Or&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if and (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 4: With&lt;/strong>&lt;/p>
&lt;p>An alternative way of writing &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code>.&lt;/code> within its scope,
and skips the block if the variable is absent.&lt;/p>
&lt;p>The first example above could be simplified as:&lt;/p>
&lt;pre>&lt;code>{{ with .Params.title }}&amp;lt;h4&amp;gt;{{ . }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 5: If -&amp;gt; Else If&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if isset .Params &amp;quot;alt&amp;quot; }}
{{ index .Params &amp;quot;alt&amp;quot; }}
{{ else if isset .Params &amp;quot;caption&amp;quot; }}
{{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;h2 id="pipes">Pipes&lt;/h2>
&lt;p>One of the most powerful components of Go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from unix pipes, the concept is simple, each pipeline&amp;rsquo;s output becomes the
input of the following pipe.&lt;/p>
&lt;p>Because of the very simple syntax of Go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.&lt;/p>
&lt;p>A few simple examples should help convey how to use the pipe.&lt;/p>
&lt;p>&lt;strong>Example 1 :&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if eq 1 1 }} Same {{ end }}
&lt;/code>&lt;/pre>
&lt;p>is the same as&lt;/p>
&lt;pre>&lt;code>{{ eq 1 1 | if }} Same {{ end }}
&lt;/code>&lt;/pre>
&lt;p>It does look odd to place the if at the end, but it does provide a good
illustration of how to use the pipes.&lt;/p>
&lt;p>&lt;strong>Example 2 :&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ index .Params &amp;quot;disqus_url&amp;quot; | html }}
&lt;/code>&lt;/pre>
&lt;p>Access the page parameter called &amp;ldquo;disqus_url&amp;rdquo; and escape the HTML.&lt;/p>
&lt;p>&lt;strong>Example 3 :&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if or (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
Stuff Here
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>Could be rewritten as&lt;/p>
&lt;pre>&lt;code>{{ isset .Params &amp;quot;caption&amp;quot; | or isset .Params &amp;quot;title&amp;quot; | or isset .Params &amp;quot;attr&amp;quot; | if }}
Stuff Here
{{ end }}
&lt;/code>&lt;/pre>
&lt;h2 id="context-aka-the-dot">Context (aka. the dot)&lt;/h2>
&lt;p>The most easily overlooked concept to understand about Go templates is that {{ . }}
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed. .
will no longer refer to the data available to the entire page. If you need to
access this from within the loop you will likely want to set it to a variable
instead of depending on the context.&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;pre>&lt;code> {{ $title := .Site.Title }}
{{ range .Params.tags }}
&amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;{{ $baseurl }}/tags/{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; - {{ $title }} &amp;lt;/li&amp;gt;
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>Notice how once we have entered the loop the value of {{ . }} has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.&lt;/p>
&lt;h1 id="hugo-parameters">Hugo Parameters&lt;/h1>
&lt;p>Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.&lt;/p>
&lt;h2 id="using-content-page-parameters">Using Content (page) Parameters&lt;/h2>
&lt;p>In each piece of content you can provide variables to be used by the
templates. This happens in the &lt;a href="https://example.org/content/front-matter">front matter&lt;/a>.&lt;/p>
&lt;p>An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn&amp;rsquo;t make a lot of sense. We&amp;rsquo;ve defined a variable in our front matter
of some pages to turn off the TOC from being displayed.&lt;/p>
&lt;p>Here is the example front matter:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">---
title: &amp;#34;Permalinks&amp;#34;
date: &amp;#34;2013-11-18&amp;#34;
aliases:
- &amp;#34;/doc/permalinks/&amp;#34;
groups: [&amp;#34;extras&amp;#34;]
groups_weight: 30
notoc: true
---
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here is the corresponding code inside of the template:&lt;/p>
&lt;pre>&lt;code> {{ if not .Params.notoc }}
&amp;lt;div id=&amp;quot;toc&amp;quot; class=&amp;quot;well col-md-4 col-sm-6&amp;quot;&amp;gt;
{{ .TableOfContents }}
&amp;lt;/div&amp;gt;
{{ end }}
&lt;/code>&lt;/pre>
&lt;h2 id="using-site-config-parameters">Using Site (config) Parameters&lt;/h2>
&lt;p>In your top-level configuration file (eg, &lt;code>config.yaml&lt;/code>) you can define site
parameters, which are values which will be available to you in chrome.&lt;/p>
&lt;p>For instance, you might declare:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="k">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">CopyrightHTML&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Copyright &amp;amp;#xA9; 2013 John Doe. All Rights Reserved.&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TwitterUser&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;spf13&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SidebarRecentLimit&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Within a footer layout, you might then declare a &lt;code>&amp;lt;footer&amp;gt;&lt;/code> which is only
provided if the &lt;code>CopyrightHTML&lt;/code> parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again. This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">{{if .Site.Params.CopyrightHTML}}&amp;lt;footer&amp;gt;
&amp;lt;div class=&amp;#34;text-center&amp;#34;&amp;gt;{{.Site.Params.CopyrightHTML | safeHtml}}&amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;{{end}}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>An alternative way of writing the &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code>.&lt;/code> within its scope,
and skips the block if the variable is absent:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">{{with .Site.Params.TwitterUser}}&amp;lt;span class=&amp;#34;twitter&amp;#34;&amp;gt;
&amp;lt;a href=&amp;#34;https://twitter.com/{{.}}&amp;#34; rel=&amp;#34;author&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;/images/twitter.png&amp;#34; width=&amp;#34;48&amp;#34; height=&amp;#34;48&amp;#34; title=&amp;#34;Twitter: {{.}}&amp;#34;
alt=&amp;#34;Twitter&amp;#34;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/span&amp;gt;{{end}}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, if you want to pull &amp;ldquo;magic constants&amp;rdquo; out of your layouts, you can do
so, such as in this example:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;nav class=&amp;#34;recent&amp;#34;&amp;gt;
&amp;lt;h1&amp;gt;Recent Posts&amp;lt;/h1&amp;gt;
&amp;lt;ul&amp;gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;{{.RelPermalink}}&amp;#34;&amp;gt;{{.Title}}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
{{end}}&amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://example.org/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><author>skojaku@iu.edu (Sadamori Kojaku)</author><guid isPermaLink="true">https://example.org/posts/migrate-from-jekyll/</guid><description>&lt;h2 id="move-static-content-to-static">Move static content to &lt;code>static&lt;/code>&lt;/h2>
&lt;p>Jekyll has a rule that any directory not starting with &lt;code>_&lt;/code> will be copied as-is to the &lt;code>_site&lt;/code> output. Hugo keeps all static content under &lt;code>static&lt;/code>. You should therefore move it all there.
With Jekyll, something that looked like&lt;/p>
&lt;pre>&lt;code>▾ &amp;lt;root&amp;gt;/
▾ images/
logo.png
&lt;/code>&lt;/pre>
&lt;p>should become&lt;/p>
&lt;pre>&lt;code>▾ &amp;lt;root&amp;gt;/
▾ static/
▾ images/
logo.png
&lt;/code>&lt;/pre>
&lt;p>Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as &lt;code>CNAME&lt;/code>) to be moved to &lt;code>static&lt;/code>.&lt;/p>
&lt;h2 id="create-your-hugo-configuration-file">Create your Hugo configuration file&lt;/h2>
&lt;p>Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the &lt;a href="https://example.org/overview/configuration/">Hugo configuration documentation&lt;/a> for details.&lt;/p>
&lt;h2 id="set-your-configuration-publish-folder-to-_site">Set your configuration publish folder to &lt;code>_site&lt;/code>&lt;/h2>
&lt;p>The default is for Jekyll to publish to &lt;code>_site&lt;/code> and for Hugo to publish to &lt;code>public&lt;/code>. If, like me, you have &lt;a href="http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.html">&lt;code>_site&lt;/code> mapped to a git submodule on the &lt;code>gh-pages&lt;/code> branch&lt;/a>, you&amp;rsquo;ll want to do one of two alternatives:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Change your submodule to point to map &lt;code>gh-pages&lt;/code> to public instead of &lt;code>_site&lt;/code> (recommended).&lt;/p>
&lt;pre>&lt;code> git submodule deinit _site
git rm _site
git submodule add -b gh-pages git@github.com:your-username/your-repo.git public
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Or, change the Hugo configuration to use &lt;code>_site&lt;/code> instead of &lt;code>public&lt;/code>.&lt;/p>
&lt;pre>&lt;code> {
..
&amp;quot;publishdir&amp;quot;: &amp;quot;_site&amp;quot;,
..
}
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ol>
&lt;h2 id="convert-jekyll-templates-to-hugo-templates">Convert Jekyll templates to Hugo templates&lt;/h2>
&lt;p>That&amp;rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to &lt;a href="http://jekyllrb.com/docs/templates/">Jekyll&amp;rsquo;s template documentation&lt;/a> if you need to refresh your memory on how you built your blog and &lt;a href="https://example.org/layout/templates/">Hugo&amp;rsquo;s template&lt;/a> to learn Hugo&amp;rsquo;s way.&lt;/p>
&lt;p>As a single reference data point, converting my templates for &lt;a href="http://heyitsalex.net/">heyitsalex.net&lt;/a> took me no more than a few hours.&lt;/p>
&lt;h2 id="convert-jekyll-plugins-to-hugo-shortcodes">Convert Jekyll plugins to Hugo shortcodes&lt;/h2>
&lt;p>Jekyll has &lt;a href="http://jekyllrb.com/docs/plugins/">plugins&lt;/a>; Hugo has &lt;a href="https://example.org/doc/shortcodes/">shortcodes&lt;/a>. It&amp;rsquo;s fairly trivial to do a port.&lt;/p>
&lt;h3 id="implementation">Implementation&lt;/h3>
&lt;p>As an example, I was using a custom &lt;a href="https://github.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc06908ec/_plugins/image_tag.rb">&lt;code>image_tag&lt;/code>&lt;/a> plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.&lt;/p>
&lt;p>Jekyll&amp;rsquo;s plugin:&lt;/p>
&lt;pre>&lt;code>module Jekyll
class ImageTag &amp;lt; Liquid::Tag
@url = nil
@caption = nil
@class = nil
@link = nil
// Patterns
IMAGE_URL_WITH_CLASS_AND_CAPTION =
IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;(\s+)-&amp;gt;((https?:\/\/|\/)(\S+))(\s*)/i
IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;/i
IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
IMAGE_URL = /((https?:\/\/|\/)(\S+))/i
def initialize(tag_name, markup, tokens)
super
if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
@class = $1
@url = $3
@caption = $7
@link = $9
elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
@class = $1
@url = $3
@caption = $7
elsif markup =~ IMAGE_URL_WITH_CAPTION
@url = $1
@caption = $5
elsif markup =~ IMAGE_URL_WITH_CLASS
@class = $1
@url = $3
elsif markup =~ IMAGE_URL
@url = $1
end
end
def render(context)
if @class
source = &amp;quot;&amp;lt;figure class='#{@class}'&amp;gt;&amp;quot;
else
source = &amp;quot;&amp;lt;figure&amp;gt;&amp;quot;
end
if @link
source += &amp;quot;&amp;lt;a href=\&amp;quot;#{@link}\&amp;quot;&amp;gt;&amp;quot;
end
source += &amp;quot;&amp;lt;img src=\&amp;quot;#{@url}\&amp;quot;&amp;gt;&amp;quot;
if @link
source += &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;
end
source += &amp;quot;&amp;lt;figcaption&amp;gt;#{@caption}&amp;lt;/figcaption&amp;gt;&amp;quot; if @caption
source += &amp;quot;&amp;lt;/figure&amp;gt;&amp;quot;
source
end
end
end
Liquid::Template.register_tag('image', Jekyll::ImageTag)
&lt;/code>&lt;/pre>
&lt;p>is written as this Hugo shortcode:&lt;/p>
&lt;pre>&lt;code>&amp;lt;!-- image --&amp;gt;
&amp;lt;figure {{ with .Get &amp;quot;class&amp;quot; }}class=&amp;quot;{{.}}&amp;quot;{{ end }}&amp;gt;
{{ with .Get &amp;quot;link&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt;{{ end }}
&amp;lt;img src=&amp;quot;{{ .Get &amp;quot;src&amp;quot; }}&amp;quot; {{ if or (.Get &amp;quot;alt&amp;quot;) (.Get &amp;quot;caption&amp;quot;) }}alt=&amp;quot;{{ with .Get &amp;quot;alt&amp;quot;}}{{.}}{{else}}{{ .Get &amp;quot;caption&amp;quot; }}{{ end }}&amp;quot;{{ end }} /&amp;gt;
{{ if .Get &amp;quot;link&amp;quot;}}&amp;lt;/a&amp;gt;{{ end }}
{{ if or (or (.Get &amp;quot;title&amp;quot;) (.Get &amp;quot;caption&amp;quot;)) (.Get &amp;quot;attr&amp;quot;)}}
&amp;lt;figcaption&amp;gt;{{ if isset .Params &amp;quot;title&amp;quot; }}
{{ .Get &amp;quot;title&amp;quot; }}{{ end }}
{{ if or (.Get &amp;quot;caption&amp;quot;) (.Get &amp;quot;attr&amp;quot;)}}&amp;lt;p&amp;gt;
{{ .Get &amp;quot;caption&amp;quot; }}
{{ with .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt; {{ end }}
{{ .Get &amp;quot;attr&amp;quot; }}
{{ if .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;/a&amp;gt; {{ end }}
&amp;lt;/p&amp;gt; {{ end }}
&amp;lt;/figcaption&amp;gt;
{{ end }}
&amp;lt;/figure&amp;gt;
&amp;lt;!-- image --&amp;gt;
&lt;/code>&lt;/pre>
&lt;h3 id="usage">Usage&lt;/h3>
&lt;p>I simply changed:&lt;/p>
&lt;pre>&lt;code>{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg &amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were &amp;quot;having fun&amp;quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; -&amp;gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}
&lt;/code>&lt;/pre>
&lt;p>to this (this example uses a slightly extended version named &lt;code>fig&lt;/code>, different than the built-in &lt;code>figure&lt;/code>):&lt;/p>
&lt;pre>&lt;code>{{% fig class=&amp;quot;full&amp;quot; src=&amp;quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&amp;quot; title=&amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; link=&amp;quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/&amp;quot; %}}
&lt;/code>&lt;/pre>
&lt;p>As a bonus, the shortcode named parameters are, arguably, more readable.&lt;/p>
&lt;h2 id="finishing-touches">Finishing touches&lt;/h2>
&lt;h3 id="fix-content">Fix content&lt;/h3>
&lt;p>Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that &lt;code>hugo server --watch&lt;/code> is your friend. Test your changes and fix errors as needed.&lt;/p>
&lt;h3 id="clean-up">Clean up&lt;/h3>
&lt;p>You&amp;rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn&amp;rsquo;t used, delete it.&lt;/p>
&lt;h2 id="a-practical-example-in-a-diff">A practical example in a diff&lt;/h2>
&lt;p>&lt;a href="http://heyitsalex.net/">Hey, it&amp;rsquo;s Alex&lt;/a> was migrated in less than a &lt;em>father-with-kids day&lt;/em> from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this &lt;a href="https://github.com/alexandre-normand/alexandre-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a...b7f6605b1265e83b4b81495423294208cc74d610">diff&lt;/a>.&lt;/p></description></item></channel></rss>