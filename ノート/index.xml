<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ノートs on Sadamori Kojaku</title><link>https://skojaku.github.io/%E3%83%8E%E3%83%BC%E3%83%88/</link><description>Recent content in ノートs on Sadamori Kojaku</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>skojaku@iu.edu (Sadamori Kojaku)</managingEditor><webMaster>skojaku@iu.edu (Sadamori Kojaku)</webMaster><lastBuildDate>Sun, 19 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://skojaku.github.io/%E3%83%8E%E3%83%BC%E3%83%88/index.xml" rel="self" type="application/rss+xml"/><item><title>Snakemakeのすゝめ</title><link>https://skojaku.github.io/%E3%83%8E%E3%83%BC%E3%83%88/snakemake%E3%81%AE%E3%81%99%E3%82%9D%E3%82%81/</link><pubDate>Sun, 19 Dec 2021 00:00:00 +0000</pubDate><author>skojaku@iu.edu (Sadamori Kojaku)</author><guid>https://skojaku.github.io/%E3%83%8E%E3%83%BC%E3%83%88/snakemake%E3%81%AE%E3%81%99%E3%82%9D%E3%82%81/</guid><description>研究はトライ＆エラーの連続です。パラメターを変え、データを変え、バグを直し、実験をやり直すことが少なくありません 🙄。 実験をやり直す時、「このプログラムを直したら、このファイルを入力して、出力されたファイルをあのプログラムに入力して&amp;hellip;」といったことに時間を費やしていませんか？ そんな時間をほぼゼロにしてくれるツール、Snakemakeを紹介します。
Snakemakeとは Snakemakeは、Pythonで書けるmakeコマンドのようなもので、欲しいファイルを指定すれば、それを生成するために必要なプログラムと中間ファイルを自動で特定し、一連の処理を自動で実行してくれるツールです。 後述する並列化やワイルドカードといった強力な機能を持ちながらも、Pythonが持つ簡便さ、柔軟さを合わせ持つのがSnakemakeの強みです💪。
百聞は一見にしかず、Snakemakeの使い方を例を通して紹介します。 本記事で使ったデータやプログラムをこちらに置いておきますので、ぜひ手元で動かしてみてください。
準備 まず、Snakemakeをcondaを使ってインストールします。
conda install -c conda-forge -c bioconda snakemake その他、プログラムの実行に必要なパッケージもインストールします。
conda install -c conda-forge -c bioconda numpy seaborn matplotlib pandas wikipedia-api ワークフローを作ろう Snakemakeの中心となる考え方がワークフローです。 ワークフローとは、下図のようなファイルを枝とするプログラムとプログラムのネットワークです。
このネットワークをSnakefileというファイルに定義していきます。 SnakefileはPythonと同じ構文で書いていきます。SnakemakeはPythonで動くので、関数を定義したりライブラリをインポートしたりなど、基本Pythonで出来ることは一通りできます。
例として以下のようなワークフローをSnakefileに記述していきましょう。
Wikipediaから記事のテキスト情報を取得する。 テキスト中の単語を数え上げる。 単語の頻度分布の図を生成する。 はじめに、以下のようなフォルダとSnakefileというテキストファイル（拡張子ナシ）を作ります。
├── data # ワークフローを実行中に生成された中間ファイルを保管するフォルダ ├── figs # 生成された図を保管するフォルダ ├── Snakefile # Snakefileのファイル └── workflow # workflowで実行するスクリプトを保管するフォルダ まず、Snakefileに、(i) 取得する記事名、(ii) 生成する中間ファイル、そして(iii)最終的な出力ファイルの名前と場所を定義します。
Snakefile
1 2 3 4 WIKI_PAGE_TITLE = &amp;#34;Sapporo&amp;#34; # (i) Wikipediaの記事のタイトル TEXT_DATA = &amp;#34;data/wiki_text.</description></item></channel></rss>